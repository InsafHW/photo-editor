[{"D:\\Программирование\\React\\MyApps\\new-editor\\src\\index.tsx":"1","D:\\Программирование\\React\\MyApps\\new-editor\\src\\reportWebVitals.ts":"2","D:\\Программирование\\React\\MyApps\\new-editor\\src\\App.tsx":"3","D:\\Программирование\\React\\MyApps\\new-editor\\src\\store\\reducers\\history.tsx":"4","D:\\Программирование\\React\\MyApps\\new-editor\\src\\store\\reducers\\editor.tsx":"5","D:\\Программирование\\React\\MyApps\\new-editor\\src\\store\\actions.tsx":"6","D:\\Программирование\\React\\MyApps\\new-editor\\src\\components\\Toolbar\\Toolbar.tsx":"7","D:\\Программирование\\React\\MyApps\\new-editor\\src\\components\\Navbar\\Navbar.tsx":"8","D:\\Программирование\\React\\MyApps\\new-editor\\src\\modelsTS\\Editor.tsx":"9","D:\\Программирование\\React\\MyApps\\new-editor\\src\\modelsTS\\Filter.tsx":"10","D:\\Программирование\\React\\MyApps\\new-editor\\src\\components\\Navbar\\ImportPhotoFromPC\\ImportPhotoFromPC.tsx":"11","D:\\Программирование\\React\\MyApps\\new-editor\\src\\components\\Navbar\\ExportToPC\\ExportToPC.tsx":"12","D:\\Программирование\\React\\MyApps\\new-editor\\src\\components\\Navbar\\ImportPhotoFromPixels\\ImportPhotoFromPixels.tsx":"13","D:\\Программирование\\React\\MyApps\\new-editor\\src\\functionsTS\\ExportToPC.tsx":"14","D:\\Программирование\\React\\MyApps\\new-editor\\src\\functionsTS\\DrawHelper.tsx":"15","D:\\Программирование\\React\\MyApps\\new-editor\\src\\components\\Canvas\\canvasNewEdi.tsx":"16","D:\\Программирование\\React\\MyApps\\new-editor\\src\\store\\reducers\\view.tsx":"17"},{"size":901,"mtime":1607493498206,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1607492189300,"results":"20","hashOfConfig":"19"},{"size":1603,"mtime":1607606819746,"results":"21","hashOfConfig":"19"},{"size":509,"mtime":1607605817185,"results":"22","hashOfConfig":"19"},{"size":3060,"mtime":1607605972475,"results":"23","hashOfConfig":"19"},{"size":653,"mtime":1607600646324,"results":"24","hashOfConfig":"19"},{"size":4404,"mtime":1607600908788,"results":"25","hashOfConfig":"19"},{"size":497,"mtime":1607492188814,"results":"26","hashOfConfig":"19"},{"size":540,"mtime":1607605395317,"results":"27","hashOfConfig":"19"},{"size":96,"mtime":1607492189238,"results":"28","hashOfConfig":"19"},{"size":4444,"mtime":1607604062780,"results":"29","hashOfConfig":"19"},{"size":2468,"mtime":1607600342195,"results":"30","hashOfConfig":"19"},{"size":265,"mtime":1607492188783,"results":"31","hashOfConfig":"19"},{"size":451,"mtime":1607492189069,"results":"32","hashOfConfig":"19"},{"size":2645,"mtime":1607492189047,"results":"33","hashOfConfig":"19"},{"size":22132,"mtime":1607605542470,"results":"34","hashOfConfig":"19"},{"size":761,"mtime":1607493464018,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1tlljv2",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"38"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"D:\\Программирование\\React\\MyApps\\new-editor\\src\\index.tsx",[],["80","81"],"D:\\Программирование\\React\\MyApps\\new-editor\\src\\reportWebVitals.ts",[],"D:\\Программирование\\React\\MyApps\\new-editor\\src\\App.tsx",["82","83","84","85"],"import React, {useState, useRef, useEffect} from 'react';\nimport { connect } from \"react-redux\"\nimport * as actionTypes from \"./store/actions\"\nimport Navbar from \"./components/Navbar/Navbar\"\n// import Holst from \"./components/Holst/Holst\"\nimport Toolbar from \"./components/Toolbar/Toolbar\"\nimport classes from \"./App.module.css\"\nimport { Tool } from './modelsTS/Editor';\nimport Canvas from \"./components/Canvas/canvas\"\nimport NewCanvas from \"./components/Canvas/canvasNewEdi\"\n\nfunction App(props: any) {\n  useEffect(() => {\n    const listener = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.key === 'z') {\n        console.log('[history]', props.history)\n        alert(\"CTRL Z\")\n        props.saveImageData(props.history[props.currentId - 1]);\n      } else if (e.ctrlKey && e.key === 'y') {\n        // redo\n        console.log('[history]', props.history)\n        alert(\"CTRL Y\")\n      }\n    }\n    window.addEventListener(\"keydown\", listener);\n    return () => {\n      window.removeEventListener(\"keydown\", listener)\n    }\n  })\n\n  return (\n    <React.Fragment>\n      <div className={classes.App}>\n        <Navbar/>\n        <NewCanvas/>\n        {/* <Cnvs /> */}\n        <Toolbar/>\n      </div>\n    </React.Fragment>\n    \n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    history: state.history.history,\n    currentId: state.editor.currentId\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Function) => {\n  return {\n    saveImageData: (imgData: ImageData) => dispatch({type: actionTypes.SAVE_IMAGE_DATA, data: imgData})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","D:\\Программирование\\React\\MyApps\\new-editor\\src\\store\\reducers\\history.tsx",["86","87","88"],"import { Editor, Tool } from '../../modelsTS/Editor';\r\nimport { Filter } from '../..//modelsTS/Filter';\r\n\r\nimport * as actionTypes from \"../actions\"\r\n\r\nconst initialState = {\r\n  history: []\r\n}\r\n\r\nconst reducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case actionTypes.PUT_IN_HISTORY:\r\n      console.log('[PUT IN HOSTORY]', state)\r\n      return {\r\n        history: state.history.concat(action.data)\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;","D:\\Программирование\\React\\MyApps\\new-editor\\src\\store\\reducers\\editor.tsx",["89","90"],"import { Editor, Tool } from '../../modelsTS/Editor';\r\nimport { Filter } from '../../modelsTS/Filter';\r\n\r\nimport * as actionTypes from \"../actions\"\r\n\r\nconst initialState: Editor = {\r\n  canvas: new ImageData(800, 600),\r\n  selectedObject: null,\r\n  filterColor: Filter.red,\r\n  currentTool: Tool.rectangle,\r\n  currentId: 1\r\n}\r\n\r\nconst reducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case actionTypes.CHANGE_SELECTED_OBJECT:\r\n      return {\r\n        ...state,\r\n        selectedObject: { ...action.newObject }\r\n      }\r\n    case actionTypes.CHANGE_CURRENT_TOOL:\r\n      return {\r\n        ...state,\r\n        currentTool: action.tool,\r\n        currentId: state.currentId + 1\r\n      }\r\n    case actionTypes.SAVE_IMAGE_DATA:\r\n      return {\r\n        ...state,\r\n        canvas: action.data\r\n      }\r\n    case actionTypes.DELETE_SELECTED_AREA:\r\n      const tempCanvas = document.createElement('canvas');\r\n      const tempCtx = tempCanvas.getContext('2d');\r\n      let newData;\r\n      const data = {...state.canvas}\r\n      if (state.selectedObject) {\r\n        for (let i = state.selectedObject.topLeft.x; i < state.selectedObject.topLeft.x + state.selectedObject.size.width; i++) {\r\n          data.data[i] = 255;\r\n          data.data[i + 1] = 255;\r\n          data.data[i + 2] = 255;\r\n        }\r\n        for (let i = state.selectedObject.topLeft.y; i < state.selectedObject.topLeft.y + state.selectedObject.size.height; i++) {\r\n          data.data[i] = 255;\r\n          data.data[i + 1] = 255;\r\n          data.data[i + 2] = 255;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        canvas: data\r\n      }\r\n    case actionTypes.APPLY_FILTER:\r\n      console.log(action)\r\n      const newImageData: ImageData = {...state.canvas};\r\n      switch (action.color) {\r\n        case Filter.blue:\r\n          for (let i = 0; i < newImageData.data.length; i += 4) {\r\n            newImageData.data[i] = 0; // red\r\n            newImageData.data[i + 2] = 0; //green\r\n          }\r\n          break\r\n        case Filter.green:\r\n          for (let i = 0; i < newImageData.data.length; i += 4) {\r\n            newImageData.data[i] = 0; // red\r\n            newImageData.data[i + 1] = 0; // blue\r\n          }\r\n          break;\r\n        case Filter.grey:\r\n          for (let i = 0; i < newImageData.data.length; i += 4) {\r\n            let ttl = newImageData.data[i] + newImageData.data[i + 1] + newImageData.data[i + 2];\r\n            let avg = Math.floor(ttl / 3);\r\n            newImageData.data[i] = avg; //red\r\n            newImageData.data[i + 1] = avg; //blue\r\n            newImageData.data[i + 2] = avg; //gren\r\n          }\r\n          break;\r\n        case Filter.red:\r\n          for (let i = 0; i < newImageData.data.length; i += 4) {\r\n            newImageData.data[i + 1] = 0; //blue\r\n            newImageData.data[i + 2] = 0; //green\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      return {\r\n        ...state,\r\n        canvas: newImageData\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;","D:\\Программирование\\React\\MyApps\\new-editor\\src\\store\\actions.tsx",[],"D:\\Программирование\\React\\MyApps\\new-editor\\src\\components\\Toolbar\\Toolbar.tsx",["91","92"],"import { stat } from 'fs';\r\nimport React, {useState} from 'react';\r\nimport { IoEllipseOutline, IoTriangleOutline, IoSquareOutline, IoColorFilterOutline, IoCutOutline } from \"react-icons/io5\"\r\nimport {SketchPicker} from \"react-color\"\r\nimport { BiText, BiSelection } from \"react-icons/bi\"\r\nimport { connect } from \"react-redux\";\r\nimport { Tool } from '../../modelsTS/Editor'\r\nimport * as actionTypes from \"../../store/actions\"\r\nimport classes from \"./Toolbar.module.css\"\r\nimport { Filter } from '../../modelsTS/Filter';\r\n\r\nconst Toolbar = (props: any) => {\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  let trCls = null, crcCls = null, rectCls = null, textCls = null, areaCls = null;\r\n  switch (props.tool) {\r\n    case Tool.triangle:\r\n      trCls = classes.active;\r\n      break;\r\n    case Tool.rectangle:\r\n      rectCls = classes.active;\r\n      break;\r\n    case Tool.ellipse:\r\n      crcCls = classes.active;\r\n      break;\r\n    case Tool.text:\r\n      textCls = classes.active;\r\n      break;\r\n    case Tool.area:\r\n      areaCls = classes.active;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  const changeCol = (color: any) => {\r\n    console.log(color)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.Toolbar}>\r\n        <IoTriangleOutline className={[classes.tool, trCls, classes.triangle].join(' ')} size=\"2em\" onClick={() => props.changeTool(Tool.triangle)} />\r\n        <IoEllipseOutline className={[classes.tool, crcCls].join(' ')} size=\"2em\" onClick={() => props.changeTool(Tool.ellipse)}/>\r\n        <IoSquareOutline className={[classes.tool, rectCls].join(' ')} size=\"2em\" onClick={() => props.changeTool(Tool.rectangle)}/>\r\n        <BiText className={[classes.tool, textCls].join(' ')} size=\"2em\" onClick={() => props.changeTool(Tool.text)}/>\r\n        <IoColorFilterOutline className={classes.tool} size=\"2em\" onClick={() => setShowFilters(!showFilters)}/>\r\n        <IoCutOutline className={classes.tool} size=\"2em\" onClick={() => props.tool === 'area' ? alert('Обрезано!') : alert('Выделите область!')}/>\r\n        <BiSelection className={[classes.tool, areaCls].join(' ')} size=\"2em\" onClick={() => props.changeTool(Tool.area)}/>\r\n    </div>\r\n    {showFilters ? (\r\n      <div className={classes.FilterMenu}>\r\n        <div className={[classes.Filter, classes.Grey].join(' ')} onClick={() => props.applyFilter(Filter.grey)}></div>\r\n        <div className={[classes.Filter, classes.Red].join(' ')} onClick={() => props.applyFilter(Filter.red)}></div>\r\n        <div className={[classes.Filter, classes.Green].join(' ')} onClick={() => props.applyFilter(Filter.green)}></div>\r\n        <div className={[classes.Filter, classes.Blue].join(' ')} onClick={() => props.applyFilter(Filter.blue)}></div>\r\n      </div>\r\n    ) : null}\r\n    {\r\n      trCls || rectCls || crcCls || textCls ? (\r\n        <div className={classes.FillColorMenu}>\r\n          <SketchPicker color={props.fillColor} onChange={(color) => props.changeFillColor(color.hex)}/>\r\n        </div>\r\n      ) : null\r\n    }\r\n    {textCls ? (\r\n      <div className={classes.textMenu}>\r\n        <span>Размер текста...</span>\r\n        <input type=\"number\" min=\"1\" max=\"90\" value={props.fontSize} onChange={(e) => props.changeFontSize(+e.target.value)}/>\r\n        <input type=\"text\" placeholder=\"Введите текст...\" value={props.text} onChange={(e) => props.changeText(e.target.value)}/>\r\n      </div>\r\n    ) : null}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    tool: state.editor.currentTool,\r\n    fillColor: state.view.fillColor,\r\n    text: state.view.text,\r\n    fontSize: state.view.fontSize\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => {\r\n  return {\r\n    changeTool: (newTool: any) => dispatch({type: actionTypes.CHANGE_CURRENT_TOOL, tool: newTool}),\r\n    deleteSelectedArea: () => dispatch({type: actionTypes.DELETE_SELECTED_AREA}),\r\n    changeText: (text: string) => dispatch({type: actionTypes.CHANGE_TEXT, value: text}),\r\n    changeFillColor: (color: any) => dispatch({type: actionTypes.CHANGE_FILL_COLOR, value: color}),\r\n    changeFontSize: (size: number) => dispatch({type: actionTypes.CHANGE_FONT_SIZE, value: size}),\r\n    applyFilter: (color: Filter) => dispatch({type: actionTypes.APPLY_FILTER, color: color})\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);","D:\\Программирование\\React\\MyApps\\new-editor\\src\\components\\Navbar\\Navbar.tsx",["93"],"import React, {useRef} from 'react'\r\n\r\nimport classes from \"./Navbar.module.css\"\r\nimport ImportPhotoFromPC from \"./ImportPhotoFromPC/ImportPhotoFromPC\"\r\nimport ImportPhotoFromPixels from \"./ImportPhotoFromPixels/ImportPhotoFromPixels\"\r\nimport ExportToPC from \"./ExportToPC/ExportToPC\"\r\n\r\nconst Navbar = (props: any) => {\r\n  return (\r\n    <nav className={classes.Navbar}>\r\n      <ImportPhotoFromPC/>\r\n      <ImportPhotoFromPixels/>\r\n      <ExportToPC />\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar","D:\\Программирование\\React\\MyApps\\new-editor\\src\\modelsTS\\Editor.tsx",[],"D:\\Программирование\\React\\MyApps\\new-editor\\src\\modelsTS\\Filter.tsx",[],"D:\\Программирование\\React\\MyApps\\new-editor\\src\\components\\Navbar\\ImportPhotoFromPC\\ImportPhotoFromPC.tsx",["94","95","96"],"import React, {useRef} from 'react'\r\nimport * as actionTypes from \"../../../store/actions\"\r\nimport { connect } from 'react-redux'\r\nimport classes from './ImportPhotoFromPC.module.css'\r\nimport changeSelectedObject from \"../../../functionsTS/ChangeSelectedObject\"\r\nimport {ImageUI} from \"../../../modelsTS/ImagUI\"\r\n\r\nconst importPhotoFromPC = (props: any) => {\r\n  const importHandler = (e: any) => {\r\n    if (e.target && e.target.files) {\r\n      const file = e.target.files[0]\r\n      const reader = new FileReader()\r\n      if (!reader) return;\r\n      reader.readAsDataURL(file)\r\n      reader.addEventListener(\"load\", () => {\r\n        let url = ''\r\n        if (reader.result) {\r\n          url = reader.result.toString()\r\n        }\r\n        const image = new Image();\r\n        image.src = url;\r\n        const canv = document.querySelector('#canvas') as HTMLCanvasElement;\r\n        const ctx = canv.getContext('2d');\r\n        if (props.selectedObj) {\r\n          if (ctx) {\r\n            ctx.fillStyle = props.selectedObj.fillColor;\r\n          }\r\n          const object = {\r\n            topLeft: {\r\n              x: props.selectedObj.topLeft.x,\r\n              y: props.selectedObj.topLeft.y\r\n            },\r\n            size: {\r\n              width: props.selectedObj.size.width,\r\n              height: props.selectedObj.size.height\r\n            }\r\n          }\r\n          switch (props.selectedObj.type) {\r\n            case 'rectangle':\r\n              drawRectangle(object, ctx);\r\n              break;\r\n            case 'triangle':\r\n              drawTriangle(object, ctx);\r\n              break;\r\n            case 'ellipse':\r\n              drawEllipse(object, ctx);\r\n              break;\r\n            default:\r\n              break;\r\n          }   \r\n          const imgData = ctx?.getImageData(0, 0, canv.width, canv.height);\r\n          props.saveImageData(imgData);\r\n        }\r\n        image.onload = () => {\r\n          const width = image.width > canv.width ? canv.width : image.width;\r\n          const height = image.height > canv.height ? canv.height : image.height;\r\n          ctx?.drawImage(image, 0, 0, width, height)\r\n          const img: ImageUI = {\r\n            topLeft: {\r\n              x: 0,\r\n              y: 0\r\n            },\r\n            size: {\r\n              width: width,\r\n              height: height\r\n            },\r\n            src: url,\r\n            type: 'image'\r\n          }\r\n          props.changeSelectedObject(img);\r\n        }\r\n      })\r\n    }\r\n  }\r\n  return (\r\n    <div className={classes.example}>\r\n      <label className={classes.label}>\r\n        <i className=\"material-icons\">attach_file</i>\r\n        <span className={classes.title}>Добавить файл</span>\r\n        <input type=\"file\" onChange={importHandler}/>\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction drawRectangle(object: any, ctx: CanvasRenderingContext2D | undefined | null) {\r\n  console.log('[DRAWING RECT]', object)\r\n  ctx?.fillRect(object.topLeft.x, object.topLeft.y, object.size.width, object.size.height);\r\n}\r\n\r\nfunction drawEllipse(object: any, ctx: CanvasRenderingContext2D | undefined | null) {\r\n  let radiusX = object.size.width / 2;\r\n  let radiusY = object.size.height / 2;\r\n  let centerX = object.topLeft.x + radiusX;\r\n  let centerY = object.topLeft.y + radiusY;\r\n  ctx?.beginPath();\r\n  ctx?.ellipse(centerX, centerY, radiusX, radiusY, 0, 0, Math.PI * 2);\r\n  ctx?.fill();\r\n}\r\n\r\nfunction drawTriangle(object: any, ctx: CanvasRenderingContext2D | undefined | null) {\r\n  ctx?.beginPath();\r\n  ctx?.moveTo(object.topLeft.x, object.topLeft.y + object.size.height);\r\n  ctx?.lineTo(object.topLeft.x + object.size.width / 2, object.topLeft.y);\r\n  ctx?.lineTo(object.topLeft.x + object.size.width, object.topLeft.y + object.size.height);\r\n  ctx?.lineTo(object.topLeft.x, object.topLeft.y + object.size.height);\r\n  ctx?.fill();\r\n}\r\n\r\nfunction drawImage(object: any, ctx: CanvasRenderingContext2D | undefined | null) {\r\n  console.log('[DRAWIMAGE]', object)\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    selectedObj: state.editor.selectedObject\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => {\r\n  return {\r\n    changeSelectedObject: (object: any) => dispatch({type: actionTypes.CHANGE_SELECTED_OBJECT, newObject: object}),\r\n    saveImageData: (imgData: ImageData) => dispatch({type: actionTypes.SAVE_IMAGE_DATA, data: imgData})\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(importPhotoFromPC);","D:\\Программирование\\React\\MyApps\\new-editor\\src\\components\\Navbar\\ExportToPC\\ExportToPC.tsx",["97","98"],"import React, { useEffect } from 'react'\r\nimport {downloadToPC} from \"../../../functionsTS/ExportToPC\"\r\nimport classes from './ExportToPC.module.css'\r\nimport { drawEllipse, drawImage, drawRectangle, drawText, drawTriangle } from '../../../functionsTS/DrawHelper'\r\nimport {Rectangle, Triangle, Ellipse} from \"../../../modelsTS/Primitives\"\r\nimport { ImageUI } from '../../../modelsTS/ImagUI'\r\nimport { TextUI } from '../../../modelsTS/TextUI'\r\nimport { connect } from 'react-redux'\r\nimport { stat } from 'fs'\r\n\r\nconst ExportToPC = (props: any) => {\r\n  return (\r\n    <button className={classes.Element} \r\n      onClick={() => {\r\n        console.log('[EXPORT]', props)\r\n        const canv = document.createElement('canvas');\r\n        canv.width = props.data.width;\r\n        canv.height = props.data.height;\r\n        canv.style.display = 'none';\r\n        canv.id = 'tempCanv'\r\n        const root = document.querySelector('#root');\r\n        if (root) {\r\n          root.appendChild(canv);\r\n          const ctx = canv.getContext('2d');\r\n          ctx?.putImageData(props.data, 0, 0);\r\n          if (props.selectedObj) {\r\n            switch (props.selectedObj.type) {\r\n              case 'rectangle':\r\n                drawRectangle(props.selectedObj as Rectangle, canv);\r\n                break;\r\n              case 'triangle':\r\n                drawTriangle(props.selectedObj as Triangle, canv);\r\n                break;\r\n              case 'ellipse':\r\n                drawEllipse(props.selectedObj as Ellipse, canv);\r\n                break;\r\n              case 'image':\r\n                // ctx?.drawImage(props.selectedObj)\r\n                drawImage(props.selectedObj as ImageUI, canv);\r\n                break;\r\n              case 'text':\r\n                drawText({...props.selectedObj, text: props.text, fontSize: props.fontSize} as TextUI, canv);\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n          if (ctx) {\r\n            const imgData = ctx.getImageData(0, 0, canv.width, canv.height);\r\n            root.removeChild(canv)\r\n            downloadToPC(imgData as ImageData);\r\n          }\r\n        }\r\n        \r\n      }}\r\n    >Export</button>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    selectedObj: state.editor.selectedObject,\r\n    data: state.editor.canvas,\r\n    text: state.view.text,\r\n    fontSize: state.view.fontSize\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ExportToPC);","D:\\Программирование\\React\\MyApps\\new-editor\\src\\components\\Navbar\\ImportPhotoFromPixels\\ImportPhotoFromPixels.tsx",[],"D:\\Программирование\\React\\MyApps\\new-editor\\src\\functionsTS\\ExportToPC.tsx",[],"D:\\Программирование\\React\\MyApps\\new-editor\\src\\functionsTS\\DrawHelper.tsx",[],["99","100"],"D:\\Программирование\\React\\MyApps\\new-editor\\src\\components\\Canvas\\canvasNewEdi.tsx",["101","102","103","104","105","106","107","108","109","110"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport { Tool } from '../../modelsTS/Editor'\r\nimport { ImageUI } from '../../modelsTS/ImagUI'\r\nimport { Point } from '../../modelsTS/Point'\r\nimport { Ellipse, Primitive, Rectangle, Triangle } from '../../modelsTS/Primitives'\r\nimport * as actionTypes from \"../../store/actions\"\r\n\r\nimport classes from \"./canvas.module.css\"\r\n\r\nconst RESIZING_RADIUS = 8;\r\nconst MIN_WIDTH = 20;\r\nconst MIN_HEIGHT = 20;\r\n\r\n\r\nconst Canvas = (props: any) => {\r\n  const [downpos, setDownpos] = useState<Point>({x: 0, y: 0});\r\n  const canvasEl = useRef<HTMLCanvasElement|null>(null);\r\n  const [inFigure, setInFigure] = useState<Boolean>(false);\r\n  const shapeBorder = useRef({left: 0, top: 0, width: 0, height: 0});\r\n  const [drawing, setDrawing] = useState(false);\r\n  const [resizing, setResizing] = useState(false);\r\n  const movedelta = useRef(0);\r\n  const resizePos = useRef(0);\r\n  const img = useRef<HTMLImageElement|null>(null);\r\n\r\n  const updateShapeBorder = (loc: Point) => {\r\n    const width = Math.abs(loc.x - downpos.x);\r\n    const height = Math.abs(loc.y - downpos.y);\r\n    let left, top;\r\n\r\n    if (loc.x > downpos.x) {\r\n      left = downpos.x;\r\n    } else {\r\n      left = loc.x;\r\n    }\r\n\r\n    if (loc.y > downpos.y) {\r\n      top = downpos.y;\r\n    } else {\r\n      top = loc.y;\r\n    }\r\n\r\n    shapeBorder.current = {\r\n      left: left,\r\n      top: top,\r\n      width: width,\r\n      height: height\r\n    }\r\n  }\r\n\r\n  const getMousePosition = (x: number, y: number) => {\r\n    if (canvasEl.current) {\r\n      const ctx = canvasEl.current.getContext('2d');\r\n      const canvasSizeData = canvasEl.current.getBoundingClientRect();\r\n      return {\r\n        x: (x - canvasSizeData.left) * (canvasEl.current.width / canvasSizeData.width),\r\n        y: (y - canvasSizeData.top) * (canvasEl.current.height / canvasSizeData.height)\r\n      }\r\n    }\r\n  }\r\n\r\n  const makeFigure = (type: any) => {\r\n    return {\r\n      topLeft: {\r\n        x: shapeBorder.current.left,\r\n        y: shapeBorder.current.top\r\n      },\r\n      size: {\r\n        width: shapeBorder.current.width,\r\n        height: shapeBorder.current.height\r\n      },\r\n      type: type,\r\n      fillColor: props.fillColor\r\n    }\r\n  }\r\n\r\n  const isInFigure = (loc: Point) => {\r\n    if (props.selectedObj && loc && canvasEl.current) {\r\n      if (loc.x < props.selectedObj.topLeft.x\r\n        || loc.x > props.selectedObj.topLeft.x + props.selectedObj.size.width\r\n        || loc.x > props.selectedObj.topLeft.x + props.selectedObj.size.width\r\n        || loc.y < props.selectedObj.topLeft.y\r\n        || loc.y > props.selectedObj.topLeft.y + props.selectedObj.size.height) {\r\n          return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const isInResizingZone = (loc: Point) => {\r\n    if (props.selectedObj && loc && canvasEl.current) {\r\n      const obj = {...props.selectedObj};\r\n      const resizingZone = {\r\n        start: {\r\n          leftTop: {\r\n            x: obj.topLeft.x,\r\n            y: obj.topLeft.y\r\n          },\r\n          rightTop: {\r\n            x: obj.topLeft.x + obj.size.width,\r\n            y: obj.topLeft.y\r\n          },\r\n          leftBottom: {\r\n            x: obj.topLeft.x,\r\n            y: obj.topLeft.y + obj.size.height\r\n          },\r\n          rightBottom: {\r\n            x: obj.topLeft.x + obj.size.width,\r\n            y: obj.topLeft.y + obj.size.height\r\n          }\r\n        },\r\n        end: {\r\n          leftTop: {\r\n            x: obj.topLeft.x - RESIZING_RADIUS * 2,\r\n            y: obj.topLeft.y - RESIZING_RADIUS * 2\r\n          },\r\n          rightTop: {\r\n            x: obj.topLeft.x + obj.size.width + RESIZING_RADIUS * 2,\r\n            y: obj.topLeft.y - RESIZING_RADIUS * 2\r\n          },\r\n          leftBottom: {\r\n            x: obj.topLeft.x - RESIZING_RADIUS * 2,\r\n            y: obj.topLeft.y + obj.size.height + RESIZING_RADIUS * 2\r\n          },\r\n          rightBottom: {\r\n            x: obj.topLeft.x + obj.size.width + RESIZING_RADIUS * 2,\r\n            y: obj.topLeft.y + obj.size.height + RESIZING_RADIUS * 2\r\n          }\r\n        }\r\n      }\r\n      if (loc.x < resizingZone.start.leftTop.x && loc.x > resizingZone.end.leftTop.x && loc.y < resizingZone.start.leftTop.y && loc.y > resizingZone.end.leftTop.y) {\r\n        return 1;\r\n      } else if (loc.x > resizingZone.start.rightTop.x && loc.x < resizingZone.end.rightTop.x && loc.y < resizingZone.start.rightTop.y && loc.y > resizingZone.end.rightTop.y) {\r\n        return 2;\r\n      } else if (loc.x < resizingZone.start.leftBottom.x && loc.x > resizingZone.end.leftBottom.x && loc.y > resizingZone.start.leftBottom.y && loc.y <resizingZone.end.leftBottom.y) {\r\n        return 3;\r\n      } else if (loc.x > resizingZone.start.rightBottom.x && loc.x < resizingZone.end.rightBottom.x && loc.y > resizingZone.start.rightBottom.y && loc.y < resizingZone.end.rightBottom.y) {\r\n        return 4;\r\n      }\r\n      return false;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const drawResizingElements = () => {\r\n    const ctx = canvasEl.current?.getContext('2d');\r\n    ctx?.beginPath();\r\n    ctx?.arc(shapeBorder.current.left - RESIZING_RADIUS, shapeBorder.current.top - RESIZING_RADIUS, RESIZING_RADIUS, 0, Math.PI * 2);\r\n    ctx?.stroke();\r\n    ctx?.beginPath();\r\n    ctx?.arc(shapeBorder.current.left + shapeBorder.current.width + RESIZING_RADIUS, shapeBorder.current.top - RESIZING_RADIUS, RESIZING_RADIUS, 0, Math.PI * 2);\r\n    ctx?.stroke();\r\n    ctx?.beginPath();\r\n    ctx?.arc(shapeBorder.current.left - RESIZING_RADIUS, shapeBorder.current.top + shapeBorder.current.height + RESIZING_RADIUS, RESIZING_RADIUS, 0, Math.PI * 2);\r\n    ctx?.stroke();\r\n    ctx?.beginPath();\r\n    ctx?.arc(shapeBorder.current.left + shapeBorder.current.width + RESIZING_RADIUS, shapeBorder.current.top + shapeBorder.current.height + RESIZING_RADIUS, RESIZING_RADIUS, 0, Math.PI * 2);\r\n    ctx?.stroke();\r\n    ctx?.beginPath();\r\n    ctx?.strokeRect(shapeBorder.current.left, shapeBorder.current.top, shapeBorder.current.width, shapeBorder.current.height);\r\n    ctx?.closePath();\r\n  }\r\n\r\n  const drawSelectedObject = () => {\r\n    const ctx = canvasEl.current?.getContext('2d');\r\n    if (ctx) {\r\n      ctx.fillStyle = props.fillColor;\r\n    }\r\n    const object = {\r\n      topLeft: {\r\n        x: props.selectedObj.topLeft.x,\r\n        y: props.selectedObj.topLeft.y\r\n      },\r\n      size: {\r\n        width: props.selectedObj.size.width,\r\n        height: props.selectedObj.size.height\r\n      }\r\n    }\r\n    switch (props.selectedObj.type) {\r\n      case 'rectangle':\r\n        drawRectangle(object, ctx);\r\n        break;\r\n      case 'ellipse':\r\n        drawEllipse(object, ctx);\r\n        break;\r\n      case 'triangle':\r\n        drawTriangle(object, ctx);\r\n        break;\r\n      case 'text':\r\n        if (ctx) {\r\n          ctx.font = `normal ${props.fontSize}px ${props.fontFamily}`;\r\n        }\r\n        let width = props.selectedObj.size.width;\r\n        if (props.fontSize * (props.text.length - 2.5) > width) {\r\n          width = props.fontSize * (props.text.length - 2.5)\r\n          console.log('[NE LEZET]')\r\n        }\r\n        ctx?.beginPath();\r\n        ctx?.fillText(props.text, props.selectedObj.topLeft.x , props.selectedObj.topLeft.y + (+props.fontSize));\r\n        break;\r\n      case 'area':\r\n        if (ctx) {\r\n          ctx.strokeStyle = 'violet';\r\n        }\r\n        ctx?.strokeRect(props.selectedObj.topLeft.x, props.selectedObj.topLeft.y, props.selectedObj.size.width, props.selectedObj.size.height);\r\n        break;\r\n      case 'image':\r\n        if (img.current) {\r\n          ctx?.drawImage(img.current, props.selectedObj.topLeft.x, props.selectedObj.topLeft.y, img.current.width, img.current.height)\r\n        } else {\r\n            const image = new Image();\r\n            image.src = props.selectedObj.src;\r\n            image.onload = () => {\r\n            const width = image.width;\r\n            const height = image.height;\r\n            shapeBorder.current.left = props.selectedObj.topLeft.x;\r\n            shapeBorder.current.top = props.selectedObj.topLeft.y;\r\n            shapeBorder.current.width = width;\r\n            shapeBorder.current.height = height;\r\n            img.current = image;\r\n            ctx?.drawImage(image, shapeBorder.current.left, shapeBorder.current.top, width, height)\r\n          }\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('[PROPS]', props)\r\n    const ctx = canvasEl.current?.getContext('2d');\r\n    ctx?.clearRect(0, 0, props.width, props.height);\r\n    ctx?.putImageData(props.data, 0, 0);\r\n    if (props.selectedObj) {\r\n      drawSelectedObject();\r\n      ctx?.beginPath();\r\n      ctx?.arc(props.selectedObj.topLeft.x - RESIZING_RADIUS, props.selectedObj.topLeft.y - RESIZING_RADIUS, RESIZING_RADIUS, 0, Math.PI * 2);\r\n      ctx?.stroke();\r\n      ctx?.beginPath();\r\n      ctx?.arc(props.selectedObj.topLeft.x + props.selectedObj.size.width +  RESIZING_RADIUS, props.selectedObj.topLeft.y - RESIZING_RADIUS, RESIZING_RADIUS, 0, Math.PI * 2);\r\n      ctx?.stroke();\r\n      ctx?.beginPath();\r\n      ctx?.arc(props.selectedObj.topLeft.x - RESIZING_RADIUS, props.selectedObj.topLeft.y + props.selectedObj.size.height + RESIZING_RADIUS, RESIZING_RADIUS, 0, Math.PI * 2);\r\n      ctx?.stroke();\r\n      ctx?.beginPath();\r\n      ctx?.arc(props.selectedObj.topLeft.x + props.selectedObj.size.width + RESIZING_RADIUS, props.selectedObj.topLeft.y + props.selectedObj.size.height + RESIZING_RADIUS, RESIZING_RADIUS, 0, Math.PI * 2);\r\n      ctx?.stroke();\r\n      ctx?.strokeRect(props.selectedObj.topLeft.x, props.selectedObj.topLeft.y, props.selectedObj.size.width, props.selectedObj.size.height);\r\n      ctx?.closePath();\r\n    }\r\n  }, [props.selectedObj, props.text, props.fontSize, props.fillColor]) //LAST CHANGES [filterClor]\r\n\r\n  return (\r\n    <div className={classes.Canvas}>\r\n      <canvas id=\"canvas\" width={props.width} height={props.height} ref={canvasEl}\r\n        onMouseDown={(e) => {\r\n          const loc = getMousePosition(e.clientX, e.clientY);\r\n          if (loc) {\r\n            let pointInFigure = isInFigure(loc);\r\n            let pointInResizing = isInResizingZone(loc);\r\n            if (pointInFigure) {\r\n              setInFigure(true);\r\n              drawResizingElements();\r\n            } else if (pointInResizing) {\r\n              resizePos.current = pointInResizing;\r\n              setResizing(true);\r\n            } else {\r\n              const ctx = canvasEl.current?.getContext('2d');\r\n              ctx?.clearRect(0, 0, props.width, props.height);\r\n              ctx?.putImageData(props.data, 0, 0);\r\n              const imgData = ctx?.getImageData(0, 0, props.data.width, props.data.height);\r\n              props.saveImageData(imgData);\r\n              if (props.selectedObj) {\r\n                drawSelectedObject();\r\n              }\r\n              setDrawing(true);\r\n            }\r\n            setDownpos(loc);\r\n          }\r\n        }}\r\n        onMouseMove={(e) => {\r\n          const loc = getMousePosition(e.clientX, e.clientY);\r\n          const ctx = canvasEl.current?.getContext('2d');\r\n          if (drawing && loc && ctx) {\r\n            console.log('[DRAWING]', props.currentTool)\r\n            movedelta.current = Math.abs(e.movementX) + Math.abs(e.movementY);\r\n            updateShapeBorder(loc);\r\n            ctx.clearRect(0, 0, props.width, props.height);\r\n            ctx.putImageData(props.data, 0, 0);\r\n            if (props.selectedObj) {\r\n              drawSelectedObject();\r\n            }\r\n            if (ctx) {\r\n              ctx.fillStyle = props.fillColor;\r\n            }\r\n            const object = {\r\n              topLeft: {\r\n                x: shapeBorder.current.left,\r\n                y: shapeBorder.current.top\r\n              },\r\n              size: {\r\n                width: shapeBorder.current.width,\r\n                height: shapeBorder.current.height\r\n              }\r\n            }\r\n            switch (props.currentTool) {\r\n              case Tool.rectangle:\r\n                drawRectangle(object, ctx);\r\n                break;\r\n              case Tool.ellipse:\r\n                drawEllipse(object, ctx);\r\n                break;\r\n              case Tool.triangle:\r\n                drawTriangle(object, ctx);\r\n                break;\r\n              case Tool.text:\r\n                if (ctx) {\r\n                  ctx.font = `normal ${props.fontSize}px Arial`;\r\n                }\r\n                ctx.beginPath();\r\n                ctx.fillText(props.text, shapeBorder.current.left, shapeBorder.current.top + (+props.fontSize));\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n            drawResizingElements();\r\n          } else if (inFigure && loc && canvasEl.current) {\r\n            console.log('[MOVING]')\r\n            if (ctx) {\r\n              ctx.fillStyle = props.fillColor;\r\n            }\r\n            movedelta.current = Math.abs(e.movementX) + Math.abs(e.movementY);\r\n            shapeBorder.current.left += e.movementX;\r\n            shapeBorder.current.top += e.movementY;\r\n            const object = {\r\n              topLeft: {\r\n                x: shapeBorder.current.left,\r\n                y: shapeBorder.current.top\r\n              },\r\n              size: {\r\n                width: shapeBorder.current.width,\r\n                height: shapeBorder.current.height\r\n              }\r\n            }\r\n            ctx?.clearRect(0, 0, props.width, props.height);\r\n            ctx?.putImageData(props.data, 0, 0);\r\n            if (props.selectedObj.type === 'image' && img.current) {\r\n              ctx?.drawImage(img.current, shapeBorder.current.left, shapeBorder.current.top, shapeBorder.current.width, shapeBorder.current.height)\r\n            }\r\n            switch (props.selectedObj.type) {\r\n              case Tool.rectangle:\r\n                drawRectangle(object, ctx);\r\n                break;\r\n              case Tool.ellipse:\r\n                drawEllipse(object, ctx);\r\n                break;\r\n              case Tool.triangle:\r\n                drawTriangle(object, ctx);\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n            drawResizingElements();\r\n          } else if (resizing && loc && canvasEl.current) {\r\n            movedelta.current = Math.abs(e.movementX) + Math.abs(e.movementY);\r\n            let isWidthMin = shapeBorder.current.width < MIN_WIDTH;\r\n            let isHeightMin = shapeBorder.current.height < MIN_HEIGHT;\r\n            if (resizePos.current === 1) {\r\n              if (!isWidthMin || e.movementX < 0) {\r\n                shapeBorder.current.left += e.movementX;\r\n                shapeBorder.current.width += (-e.movementX);\r\n              }\r\n              if (!isHeightMin || e.movementY < 0) {\r\n                shapeBorder.current.top += e.movementY;\r\n                shapeBorder.current.height += (-e.movementY);\r\n              }\r\n            }\r\n            else if (resizePos.current === 2) {\r\n              if (!isWidthMin || e.movementX > 0) {\r\n                shapeBorder.current.width += (e.movementX);\r\n              }\r\n              if (!isHeightMin || e.movementY < 0) {\r\n                shapeBorder.current.top += e.movementY;\r\n                shapeBorder.current.height += (-e.movementY);\r\n              }\r\n            } else if (resizePos.current === 3) {\r\n              if (!isWidthMin || e.movementX < 0) {\r\n                shapeBorder.current.left += e.movementX;\r\n                shapeBorder.current.width += (-e.movementX);\r\n              }\r\n              if (!isHeightMin || e.movementY > 0) {\r\n                shapeBorder.current.height += (e.movementY);\r\n              }\r\n              \r\n            } else if (resizePos.current === 4) {\r\n              if (!isWidthMin || e.movementX > 0) {\r\n                shapeBorder.current.width += e.movementX;\r\n              }\r\n              if (!isHeightMin || e.movementY > 0) {\r\n                shapeBorder.current.height += e.movementY;\r\n              }\r\n            }\r\n            const object = {\r\n              topLeft: {\r\n                x: shapeBorder.current.left,\r\n                y: shapeBorder.current.top\r\n              },\r\n              size: {\r\n                width: shapeBorder.current.width,\r\n                height: shapeBorder.current.height\r\n              }\r\n            }\r\n            ctx?.clearRect(0, 0, props.width, props.height);\r\n            ctx?.putImageData(props.data, 0, 0);\r\n            if (props.selectedObj && props.selectedObj.type === 'image' && img.current) {\r\n              console.log('[RESIZING]', props.selectedObj.type)\r\n              ctx?.drawImage(img.current, shapeBorder.current.left, shapeBorder.current.top, shapeBorder.current.width, shapeBorder.current.height);\r\n            } else {\r\n              switch (props.selectedObj.type) {\r\n                case Tool.rectangle:\r\n                  drawRectangle(object, ctx);\r\n                  break;\r\n                case Tool.ellipse:\r\n                  drawEllipse(object, ctx);\r\n                  break;\r\n                case Tool.triangle:\r\n                  drawTriangle(object, ctx);\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n            }\r\n            drawResizingElements();\r\n          }\r\n        }}\r\n        onMouseUp={(e) => {\r\n          const loc = getMousePosition(e.pageX, e.pageY);\r\n          if (movedelta.current === 0 && drawing) {\r\n            const ctx = canvasEl.current?.getContext('2d');\r\n              if (props.selectedObj) {\r\n                drawSelectedObject();\r\n              }\r\n          }\r\n          if (movedelta.current !== 0 && img.current && inFigure) {\r\n            const object = {\r\n              topLeft: {\r\n                x: shapeBorder.current.left,\r\n                y: shapeBorder.current.top\r\n              },\r\n              size: {\r\n                width: img.current.width,\r\n                height: img.current.height\r\n              },\r\n              src: img.current.src,\r\n              type: 'image'\r\n            }\r\n            props.changeSelectedObject(object);\r\n          }\r\n          if (movedelta.current !== 0 && drawing) {\r\n            const ctx = canvasEl.current?.getContext('2d');\r\n            ctx?.clearRect(0, 0, props.width, props.height);\r\n            ctx?.putImageData(props.data, 0, 0);\r\n            if (img.current) {\r\n              ctx?.drawImage(img.current, props.selectedObj.topLeft.x, props.selectedObj.topLeft.y, img.current.width, img.current.height);\r\n              img.current = null;\r\n            }\r\n            if (props.selectedObj) {\r\n              drawSelectedObject();\r\n            }\r\n            const imgData = ctx?.getImageData(0, 0, props.data.width, props.data.height);\r\n            props.putInHistory(props.data);\r\n            props.saveImageData(imgData);\r\n          }\r\n          if (movedelta.current !== 0 && resizing && props.selectedObj && props.selectedObj.type === 'image' && img.current && loc) {\r\n            const ctx = canvasEl.current?.getContext('2d');\r\n            console.log('[IMAGE UP]', shapeBorder.current)\r\n            img.current.width = shapeBorder.current.width;\r\n            img.current.height = shapeBorder.current.height;\r\n            ctx?.drawImage(img.current, shapeBorder.current.left, shapeBorder.current.top, shapeBorder.current.width, shapeBorder.current.height);\r\n          }\r\n          else if (movedelta.current !== 0 && loc && (drawing || resizing)) {\r\n            console.log('[CHANGED_OBJECT]')\r\n            const object = makeFigure(props.currentTool);\r\n            props.changeSelectedObject(object);\r\n          } else if (movedelta.current !== 0 && loc && inFigure) {\r\n            console.log('[CHANGED_OBJECT]')\r\n            const object = makeFigure(props.selectedObj.type);\r\n            props.changeSelectedObject(object);\r\n          }\r\n          movedelta.current = 0;\r\n          resizePos.current = 0;\r\n          setDrawing(false);\r\n          setInFigure(false);\r\n          setResizing(false);\r\n        }}\r\n        ></canvas>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction drawRectangle(object: any, ctx: CanvasRenderingContext2D | undefined | null) {\r\n  ctx?.fillRect(object.topLeft.x, object.topLeft.y, object.size.width, object.size.height);\r\n}\r\n\r\nfunction drawEllipse(object: any, ctx: CanvasRenderingContext2D | undefined | null) {\r\n  let radiusX = object.size.width / 2;\r\n  let radiusY = object.size.height / 2;\r\n  let centerX = object.topLeft.x + radiusX;\r\n  let centerY = object.topLeft.y + radiusY;\r\n  ctx?.beginPath();\r\n  ctx?.ellipse(centerX, centerY, radiusX, radiusY, 0, 0, Math.PI * 2);\r\n  ctx?.fill();\r\n}\r\n\r\nfunction drawTriangle(object: any, ctx: CanvasRenderingContext2D | undefined | null) {\r\n  ctx?.beginPath();\r\n  ctx?.moveTo(object.topLeft.x, object.topLeft.y + object.size.height);\r\n  ctx?.lineTo(object.topLeft.x + object.size.width / 2, object.topLeft.y);\r\n  ctx?.lineTo(object.topLeft.x + object.size.width, object.topLeft.y + object.size.height);\r\n  ctx?.lineTo(object.topLeft.x, object.topLeft.y + object.size.height);\r\n  ctx?.fill();\r\n}\r\n\r\nfunction drawImage(object: any, ctx: CanvasRenderingContext2D | undefined | null) {\r\n  console.log('[DRAWIMAGE]', object)\r\n}\r\n\r\nfunction drawText(object: any, ctx: CanvasRenderingContext2D | undefined | null) {\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    selectedObj: state.editor.selectedObject,\r\n    data: state.editor.canvas,\r\n    currentTool: state.editor.currentTool,\r\n    width: state.editor.canvas.width,\r\n    height: state.editor.canvas.height,\r\n    fillColor: state.view.fillColor,\r\n    text: state.view.text,\r\n    fontSize: state.view.fontSize\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    changeSelectedObject: (newObject: any) => dispatch({type: actionTypes.CHANGE_SELECTED_OBJECT, newObject: newObject}),\r\n    saveImageData: (imgData: ImageData) => dispatch({type: actionTypes.SAVE_IMAGE_DATA, data: imgData}),\r\n    putInHistory: (imgData: ImageData) => dispatch({type: actionTypes.PUT_IN_HISTORY, data: imgData})\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Canvas);","D:\\Программирование\\React\\MyApps\\new-editor\\src\\store\\reducers\\view.tsx",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":16,"nodeType":"117","messageId":"118","endLine":1,"endColumn":24},{"ruleId":"115","severity":1,"message":"119","line":1,"column":26,"nodeType":"117","messageId":"118","endLine":1,"endColumn":32},{"ruleId":"115","severity":1,"message":"120","line":8,"column":10,"nodeType":"117","messageId":"118","endLine":8,"endColumn":14},{"ruleId":"115","severity":1,"message":"121","line":9,"column":8,"nodeType":"117","messageId":"118","endLine":9,"endColumn":14},{"ruleId":"115","severity":1,"message":"122","line":1,"column":10,"nodeType":"117","messageId":"118","endLine":1,"endColumn":16},{"ruleId":"115","severity":1,"message":"120","line":1,"column":18,"nodeType":"117","messageId":"118","endLine":1,"endColumn":22},{"ruleId":"115","severity":1,"message":"123","line":2,"column":10,"nodeType":"117","messageId":"118","endLine":2,"endColumn":16},{"ruleId":"115","severity":1,"message":"124","line":34,"column":13,"nodeType":"117","messageId":"118","endLine":34,"endColumn":20},{"ruleId":"115","severity":1,"message":"125","line":35,"column":11,"nodeType":"117","messageId":"118","endLine":35,"endColumn":18},{"ruleId":"115","severity":1,"message":"126","line":1,"column":10,"nodeType":"117","messageId":"118","endLine":1,"endColumn":14},{"ruleId":"115","severity":1,"message":"127","line":35,"column":9,"nodeType":"117","messageId":"118","endLine":35,"endColumn":18},{"ruleId":"115","severity":1,"message":"119","line":1,"column":16,"nodeType":"117","messageId":"118","endLine":1,"endColumn":22},{"ruleId":"115","severity":1,"message":"119","line":1,"column":16,"nodeType":"117","messageId":"118","endLine":1,"endColumn":22},{"ruleId":"115","severity":1,"message":"128","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":28},{"ruleId":"115","severity":1,"message":"129","line":110,"column":10,"nodeType":"117","messageId":"118","endLine":110,"endColumn":19},{"ruleId":"115","severity":1,"message":"130","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":26},{"ruleId":"115","severity":1,"message":"126","line":9,"column":10,"nodeType":"117","messageId":"118","endLine":9,"endColumn":14},{"ruleId":"111","replacedBy":"131"},{"ruleId":"113","replacedBy":"132"},{"ruleId":"115","severity":1,"message":"133","line":4,"column":10,"nodeType":"117","messageId":"118","endLine":4,"endColumn":17},{"ruleId":"115","severity":1,"message":"134","line":6,"column":10,"nodeType":"117","messageId":"118","endLine":6,"endColumn":17},{"ruleId":"115","severity":1,"message":"135","line":6,"column":19,"nodeType":"117","messageId":"118","endLine":6,"endColumn":28},{"ruleId":"115","severity":1,"message":"136","line":6,"column":30,"nodeType":"117","messageId":"118","endLine":6,"endColumn":39},{"ruleId":"115","severity":1,"message":"137","line":6,"column":41,"nodeType":"117","messageId":"118","endLine":6,"endColumn":49},{"ruleId":"115","severity":1,"message":"138","line":54,"column":13,"nodeType":"117","messageId":"118","endLine":54,"endColumn":16},{"ruleId":"139","severity":1,"message":"140","line":255,"column":6,"nodeType":"141","endLine":255,"endColumn":70,"suggestions":"142"},{"ruleId":"115","severity":1,"message":"138","line":443,"column":19,"nodeType":"117","messageId":"118","endLine":443,"endColumn":22},{"ruleId":"115","severity":1,"message":"129","line":528,"column":10,"nodeType":"117","messageId":"118","endLine":528,"endColumn":19},{"ruleId":"115","severity":1,"message":"143","line":532,"column":10,"nodeType":"117","messageId":"118","endLine":532,"endColumn":18},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'Tool' is defined but never used.","'Canvas' is defined but never used.","'Editor' is defined but never used.","'Filter' is defined but never used.","'tempCtx' is assigned a value but never used.","'newData' is defined but never used.","'stat' is defined but never used.","'changeCol' is assigned a value but never used.","'changeSelectedObject' is defined but never used.","'drawImage' is defined but never used.","'useEffect' is defined but never used.",["144"],["145"],"'ImageUI' is defined but never used.","'Ellipse' is defined but never used.","'Primitive' is defined but never used.","'Rectangle' is defined but never used.","'Triangle' is defined but never used.","'ctx' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'drawSelectedObject' and 'props'. Either include them or remove the dependency array.","ArrayExpression",["146"],"'drawText' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},"Update the dependencies array to be: [props.selectedObj, props.text, props.fontSize, props.fillColor, props, drawSelectedObject]",{"range":"149","text":"150"},[9738,9802],"[props.selectedObj, props.text, props.fontSize, props.fillColor, props, drawSelectedObject]"]